# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Update tailscale key

on:
  workflow_dispatch:
  schedule:
    # Run at midnight on the first day of the month
    # Every month
    - cron: '0 0 1 * *'

permissions:
  contents: read

jobs:
  update-ts:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # needed to push new branches
      pull-requests: write # needed to create and merge PRs


    steps:
      - uses: actions/checkout@v4

      - name: Install packages
        run: |
          wget https://github.com/str4d/age-plugin-yubikey/releases/download/v0.5.0/age-plugin-yubikey_0.5.0-1_amd64.deb
          sudo apt install ./age-plugin-yubikey_0.5.0-1_amd64.deb
          sudo apt install age
          python -m pip install requests
          
      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            
      - name: Create new key
        env:
          TS_CLIENT_ID: ${{ secrets.TS_CLIENT_ID }}
          TS_CLIENT_SECRET: ${{ secrets.TS_CLIENT_SECRET }}
        run: |
          import requests
          import json
          import subprocess
          import os
          
          def get_tailscale_api_token(client_id: str, client_secret: str):
              """
              Authenticate with the tailscale oauth api to retrieve an api token
              """
              url = "https://api.tailscale.com/api/v2/oauth/token"
              data = {
                  "client_id": client_id,
                  "client_secret": client_secret,
                  "grant_type": "client_credentials"
              }
              response = requests.post(url, data=data)
              return response.json().get("access_token")
          
          def create_tailscale_ephemeral_key(token: str):
              """
              Create a new tailscale ephemeral key
              """
              url = "https://api.tailscale.com/api/v2/tailnet/-/keys"
              headers = {
                  "Authorization": f"Bearer {token}"
              }
              data = {
                  "capabilities": {
                      "devices": {
                          "create": {
                              "reusable": True,
                              "ephemeral": True,
                              "preauthorized": True,
                              "tags": [ "tag:nix" ]
                          }
                      }
                  },
                  "description": "Nix token"
              }
          
              response = requests.post(url, headers=headers, json=data)
              return response.json().get("key")
          
          
          def parse_nix_file(path):
              # Run nix in a subprocess to evaluate the file as JSON
              result = subprocess.run(
                  ["nix", "eval", "--json", "-f", path], 
                  stdout=subprocess.PIPE, 
                  check=True, 
                  text=True
              )
              
              # Convert the JSON string to a Python dictionary
              data = json.loads(result.stdout)
              return data
          
          
          
          # 1. Retrieve the tailscale oauth client details by using the doppler api to retrieve the secrets
          tailscale_client_id = os.environ["TS_CLIENT_ID"]
          tailscale_client_secret = os.environ["TS_CLIENT_SECRET"]
          
          # 2. Use the tailscale oauth client details to authenticate with tailscale
          access_token = get_tailscale_api_token(tailscale_client_id, tailscale_client_secret)
          
          # 3. Create a new tailscale ephemeral key
          ephemeral_key = create_tailscale_ephemeral_key(access_token)
          
          secrets_config = parse_nix_file("secrets/secrets.nix")
          tailscale_keys = secrets_config["tailscale.age"]["publicKeys"]
          age_keys = []
          
          f = open("key.txt", "w")
          f.write(ephemeral_key)
          f.close()
          
          command = ["age", "-a", "-o", "secrets/tailscale.age"]
          
          for key in tailscale_keys:
              command.append("-r")
              command.append(key)
          
          command.append("key.txt")
          subprocess.run(command)
          
          print("Updated tailscale.age with new ephemeral key")
        shell: python

      - name: Commit and PR
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          git config user.name "Tiebe Groosman"
          git config user.email "tiebe.groosman@gmail.com"
          git checkout -b tailscale-update
          git add secrets/tailscale.age
          git commit -m "Update tailscale key"
          git push --force origin tailscale-update

          gh pr create \
            --title "Update tailscale key" \
            --body "Update tailscale key" \
            --head tailscale-update \
            --base main
          gh pr merge --auto --delete-branch --merge tailscale-update
