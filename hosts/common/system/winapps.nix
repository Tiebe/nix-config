{
  config,
  pkgs,
  inputs,
  lib,
  ...
}: {
  environment.systemPackages = [
    inputs.winapps.packages.x86_64-linux.winapps
    inputs.winapps.packages.x86_64-linux.winapps-launcher
  ];

  virtualisation.oci-containers.containers."WinApps" = {
    image = "ghcr.io/dockur/windows:latest";
    environment = {
      "CPU_CORES" = "6";
      "DISK_SIZE" = "32G";
      "HOME" = "/home/tiebe";
      "RAM_SIZE" = "4G";
      "VERSION" = "tiny11";
    };
    volumes = [
      "/home/tiebe:/shared:rw"
      "/home/tiebe/Downloads/oem:/oem:rw"
      "winapps_data:/storage:rw"
    ];
    ports = [
      "8006:8006/tcp"
      "3389:3389/tcp"
      "3389:3389/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--device=/dev/kvm:/dev/kvm:rwm"
      "--network-alias=windows"
      "--network=winapps_default"
      "--privileged"
    ];
  };

  systemd.services."podman-WinApps" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
    };
    after = [
      "podman-network-winapps_default.service"
      "podman-volume-winapps_data.service"
    ];
    requires = [
      "podman-network-winapps_default.service"
      "podman-volume-winapps_data.service"
    ];
    partOf = [
      "podman-compose-winapps-root.target"
    ];
    wantedBy = [
      "podman-compose-winapps-root.target"
    ];
  };

  systemd.services."podman-network-winapps_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f winapps_default";
    };
    script = ''
      podman network inspect winapps_default || podman network create winapps_default
    '';
    partOf = [ "podman-compose-winapps-root.target" ];
    wantedBy = [ "podman-compose-winapps-root.target" ];
  };

  systemd.services."podman-volume-winapps_data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect winapps_data || podman volume create winapps_data
    '';
    partOf = [ "podman-compose-winapps-root.target" ];
    wantedBy = [ "podman-compose-winapps-root.target" ];
  };

  systemd.targets."podman-compose-winapps-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

}